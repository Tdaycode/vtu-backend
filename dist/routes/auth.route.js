"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const auth_1 = require("../validations/auth");
const validate_middleware_1 = __importDefault(require("../middlewares/validate.middleware"));
const auth_middleware_1 = __importDefault(require("../middlewares/auth.middleware"));
const typedi_1 = require("typedi");
const auth_controller_1 = __importDefault(require("../controllers/auth.controller"));
const router = express_1.default.Router();
const authController = typedi_1.Container.get(auth_controller_1.default);
const authMiddleware = typedi_1.Container.get(auth_middleware_1.default);
router.post('/sign-up', validate_middleware_1.default.validate(auth_1.SignUpValidation), authController.signUp);
router.post('/sign-in', validate_middleware_1.default.validate(auth_1.SignInValidation), authController.signIn);
router.post('/logout', validate_middleware_1.default.validate(auth_1.LogoutValidation), authController.logOut);
router.post('/refresh-token', validate_middleware_1.default.validate(auth_1.LogoutValidation), authController.refreshToken);
router.post('/verify-otp', validate_middleware_1.default.validate(auth_1.VerifyOtpValidation), authController.verifyOtp);
router.post('/resend-otp', validate_middleware_1.default.validate(auth_1.ResendOtpValidation), authController.resendOtp);
router.post('/forgot-password', validate_middleware_1.default.validate(auth_1.ForgotPasswordValidation), authController.forgotPassword);
router.post('/reset-password', validate_middleware_1.default.validate(auth_1.ResetPasswordValidation), authController.resetPassword);
router.post('/change-password', authMiddleware.user, validate_middleware_1.default.validate(auth_1.ChangePasswordValidation), authController.changePassword);
router.post('/twofa', validate_middleware_1.default.validate(auth_1.TwoFAValidation), authController.completeTwoFA);
router.patch('/update-2fa', validate_middleware_1.default.validate(auth_1.Setup2faValidation), authMiddleware.user, authController.updateTwoFA);
router.post('/phone-verify', authMiddleware.user, authController.phoneVerification);
router.patch('/phone-verify', authMiddleware.user, authController.verifyPhoneOtp);
router.post('/verify-2fa', validate_middleware_1.default.validate(auth_1.Verify2faValidation), authMiddleware.user, authController.verifyTwoFA);
router.get('/me', authMiddleware.user, authController.getCurrentUser);
exports.default = router;
